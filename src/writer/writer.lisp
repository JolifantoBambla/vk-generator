;;; -*- Mode: Lisp; indent-tabs-mode: nil -*-
;;;
;;; generate.lisp --- generate CFFI bindings from vk.xml file.
;;;
;;; Copyright (c) 2016, Bart Botta  <00003b@gmail.com>
;;;   All rights reserved.
;;;
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without
;;; restriction, including without limitation the rights to use, copy,
;;; modify, merge, publish, distribute, sublicense, and/or sell copies
;;; of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;;; DEALINGS IN THE SOFTWARE.
;;;

(in-package :vk-generator/writer)

(defparameter *in-package-name* "vulkan")
(defparameter *package-nicknames* "#:%vk")
(defparameter *core-definer* "defvkfun")
(defparameter *ext-definer* "defvkextfun")

(defun write-vk-package (vk-spec vk-package-dir)
  (let* ((additional-files-dir
           (asdf:system-relative-pathname 'vk-generator
                                          (make-pathname :directory '(:relative "src" "writer" "additional-files"))))
         (vk-dir (merge-pathnames (make-pathname :directory '(:relative "src")) vk-package-dir))
         (binding-package-file (merge-pathnames "package.lisp" vk-dir))
         (translators-file (merge-pathnames "translators.lisp" vk-dir))
         (types-file (merge-pathnames "types.lisp" vk-dir))
         (funcs-file (merge-pathnames "funcs.lisp" vk-dir))
         (copy-files ;; todo: clean this up
           (list
            (list (merge-pathnames "bindings.lisp.template" additional-files-dir)
                  (merge-pathnames "bindings.lisp" vk-dir))
            (list (merge-pathnames "extra-types.lisp.template" additional-files-dir)
                  (merge-pathnames "extra-types.lisp" vk-dir))  
            (list (merge-pathnames "vk.asd.template" additional-files-dir)
                  (merge-pathnames "vk.asd" vk-package-dir)))))
    (ensure-directories-exist vk-dir :verbose t)

    (write-types-file types-file vk-spec)
    
    ;; write functions file
    (with-open-file (out funcs-file :direction :output :if-exists :supersede)
      (format out ";;; this file is automatically generated, do not edit~%")
      (format out "#||~%~a~%||#~%~%" (vulkan-license-header vk-spec))
      (format out "(in-package :~a)~%~%" *in-package-name*)
      (loop for command in (sorted-elements (alexandria:hash-table-values (commands vk-spec)))
            for name = (name command)
            for ret = (return-type command)
            for args = (params command)
            for success = (success-codes command)
            for errors = (error-codes command)
            for ext = (extensions command)
            do (format out "(~a (~s ~(~a) ~a~)"
                       (if ext *ext-definer* *core-definer*)
                       name
                       (fix-function-name name (tags vk-spec))
                       (cond
                         ((string-equal ret "VkResult")
                          "checked-result")
                         ((keywordp ret)
                          (format nil "~s" ret))
                         (t (fix-type-name ret (tags vk-spec)))))
               (loop with *print-right-margin* = 10000
                     for param in args
                     for arg-name = (fix-type-name (name param) (tags vk-spec))
                     for comment = (comment param)
                     do (format out "~&  ~((~a ~s)~)"
                                arg-name
                                (make-arg-type arg-name (type-name (type-info param)) vk-spec))
                     unless (string= comment "") do (format out " ;; ~s ~%" comment))
               (format out ")~%~%")))

    ;; write package file
    (with-open-file (out binding-package-file
                         :direction :output :if-exists :supersede)
      (format out ";;; this file is automatically generated, do not edit~%")
      (format out "#||~%~a~%||#~%~%" (vulkan-license-header vk-spec))
      (format out "(defpackage :~a~%  (:use #:cl #:cffi)~%" *in-package-name*)
      (format out "  (:nicknames ~a)~%" *package-nicknames*)
      (format out "  (:export~%")
      (loop for (type . (typetype)) in (sort (copy-list (types vk-spec))
                                             'string< :key 'car)
            do (format out "~(    :~a ;; ~s~)~%"
                       (fix-type-name type (vendor-ids vk-spec)) typetype))
      (format out "~%")
      (loop for (func) in (sort (alexandria:hash-table-alist (functions vk-spec))
                                'string< :key 'car)
            do (format out "~(    #:~a~)~%" (fix-function-name func (vendor-ids vk-spec))))
      (format out "))~%"))

    ;; write struct translators
    ;; possibly should do this while dumping struct types?
    (with-open-file (out translators-file
                         :direction :output :if-exists :supersede)
      (format out ";;; this file is automatically generated, do not edit~%")
      (format out "#||~%~a~%||#~%~%" (vulkan-license-header vk-spec))
      (format out "(in-package :~a)~%~%" *in-package-name*)
      (loop for (name . attribs) in (sort (remove-if-not
                                           (lambda (x)
                                             (and (consp (cdr x))                                                 
                                                  (member (second x)
                                                          '(:struct :union))))
                                           (types vk-spec))
                                          'string< :key 'car)
            for members = (getf (cddr attribs) :members)
            do (format out "~((def-translator ~a (deref-~a ~:[:fill fill-~a~;~])~)~%"
                       (fix-type-name name (vendor-ids vk-spec))
                       (fix-type-name name (vendor-ids vk-spec))
                       (getf (cddr attribs) :returned-only)
                       (fix-type-name name (vendor-ids vk-spec)))
               (loop for m in members
                     do (format out "~&  ~((:~{~s~^ ~})~)" m))
               (format out ")~%~%")))


    ;; copy additional files
    (loop for to-copy in copy-files
          do (cl-fad:copy-file (first to-copy) (second to-copy) :overwrite t))
    
    ;; todo: print out changes
    (force-output)
    nil))
