(in-package :vk-generator)

(defun write-printers (printers-file vk-spec &optional dry-run)
  (flet ((write-to-stream (out)
           (format out ";;; this file is automatically generated, do not edit~%~%")
           (format out "(in-package :vk)~%~%")
           (loop for struct in (sorted-elements (alexandria:hash-table-values (structures vk-spec)))
                 for fixed-type-name = (fix-type-name (name struct) (tags vk-spec))
                 for fixed-slot-names = (get-fixed-vk-class-slot-names struct vk-spec)
                 do (format out "(defmethod print-object ((obj ~(~a~)) out)
  (with-slots (~{~(~a~)~^~%               ~})
      obj
    (cl:format out \"~~i(~~@<~a~{~a~}~~:>)\"~{~%               ~(~a~)~^ ~})))~%~%"
                            fixed-type-name
                            fixed-slot-names
                            fixed-type-name
                            (loop for arg in fixed-slot-names
                                  collect (format nil "~~:@_:~(~a~) ~~s" arg))
                            fixed-slot-names))))
    (if dry-run
        (write-to-stream t)
        (with-open-file (out printers-file :direction :output :if-exists :supersede)
          (write-to-stream out)))))

