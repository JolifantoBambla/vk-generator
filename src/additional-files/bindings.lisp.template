;;; -*- Mode: Lisp; indent-tabs-mode: nil -*-
;;;
;;; Copyright (c) 2016, Bart Botta  <00003b@gmail.com>
;;;   All rights reserved.
;;;
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without
;;; restriction, including without limitation the rights to use, copy,
;;; modify, merge, publish, distribute, sublicense, and/or sell copies
;;; of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;;; DEALINGS IN THE SOFTWARE.
;;;

(in-package #:vulkan)

(define-foreign-library vulkan
  (:darwin (:and "libvulkan.1.dylib" "libMoltenVK.dylib"))
  (:unix (:or "libvulkan.so"))
  (:windows "vulkan-1.dll"))

(use-foreign-library vulkan)

(defmacro defvkfun ((cname lname) result-type &body body)
  `(defcfun (,cname ,lname :library vulkan) ,result-type ,@body))

(defvar *instance*) ;; instance pointer
(defvar *instance-params*) ;; plist of :layer, :exts, ?
(defvar *instance-extensions*) ;; extension function pointers

(defmacro defvkextfun ((cname lname) result-type &body args)
  `(defun ,lname (,@ (mapcar 'car args))
     (assert *instance*)
     (foreign-funcall-pointer
      (or (gethash ',lname *instance-extensions*)
          (setf (gethash ',lname *instance-extensions*)
                (get-instance-proc-addr *instance* ,cname)))
      nil
      ,@(loop for arg in args
              collect (second arg) collect (first arg))
      ,result-type)))

(if (= 8 (foreign-type-size :pointer))
    (defctype size-t :uint64)
    (defctype size-t :uint32))
